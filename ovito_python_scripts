------------------------------------------------------------------------------------------
Script for surfaces on cells:

from ovito.data import *
from ovito.modifiers import *
from ovito.vis import *
import matplotlib.cm
def modify(frame: int, data: DataCollection):
    
    for cell_id in set(data.particles["Molecule Type"]):
        data.apply(ExpressionSelectionModifier(expression = f"MoleculeType == {cell_id}"))
        # Construct surface mesh:
        mod = ConstructSurfaceModifier(
            method = ConstructSurfaceModifier.Method.GaussianDensity, 
            only_selected=True,
            radius_scaling = 1.0,
            grid_resolution = 100, 
            isolevel = 0.69)
        data.apply(mod)
    
    data.apply(ClearSelectionModifier()) 
    cmap = matplotlib.cm.get_cmap('Spectral')
   
    #Color coding:    
    for i, mesh in enumerate(data.surfaces):
        mesh_vis = data.surfaces[mesh].vis
        mesh_vis.surface_transparency = 0.5
        mesh_vis.surface_color = cmap(i/(len(data.surfaces)))[:3]
    data.apply(ExpressionSelectionModifier(expression = f"ParticleType == 1"))
    # Delete Particles:
    mod1 = DeleteSelectedModifier()
    data.apply(mod1)
    data.apply(ClearSelectionModifier())
----------------------------------------------------------------------------------------
  
------------------------------------------Projected surface area for creep---------------------------------------------------------
from ovito.data import *

def xyproj_triarea(p1, p2, p3):
    x1, y1 = p1 
    x2, y2 = p2
    x3, y3 = p3
    return abs((0.5)*(x1*(y2-y3)+x2*(y3-y1)+x3*(y1-y2)))

def modify(frame: int, data: DataCollection):
    #Option 1
    surface = data.surfaces['surface']
    vertices = surface.get_vertices()
    abs_area = 0.0
    for face in surface.get_faces():
        v1, v2, v3 = vertices[face]
        abs_area += xyproj_triarea(v1[:2], v2[:2], v3[:2])
    print(abs_area/2.)
    
    #Option 2
    zcut = 9.6 #the appropriate z cutoff value should be privided for each simualted cell
    abs_area = 0.0
    sel = data.surfaces['surface_'].faces_.create_property("Selection")
    for i, face in enumerate(surface.get_faces()):
        v1, v2, v3 = vertices[face]
        if v1[2] > zcut and v2[2] > zcut and v3[2] > zcut :
            sel[i] = 1
            abs_area += xyproj_triarea(v1[:2], v2[:2], v3[:2])
    print(abs_area) 
         
    --------------------------------------------------------Volume calculation-----------------------------------------------------------------
    from ovito.data import *
import numpy as np

def SignedVolumeOfTriangle(p1,p2,p3):
    return np.dot(p1, np.cross(p2,p3)) / 6.0

def modify(frame: int, data: DataCollection):
 
    mesh = data.surfaces['surface']
    verts = mesh.vertices['Position'][mesh.get_face_vertices()]
    vol = 0
    for v in verts:
        yield
        vol+=SignedVolumeOfTriangle(*v)    
    print(f'Volume = {vol:.2f}, Surface Area = {data.attributes["ConstructSurfaceMesh.surface_area"]:.2f}')   
    
    #Save result as global attribute
    data.attributes["Cell Volume"] = vol
------------------------------------------------------------------------------------------------------------------------------------------------------- 
--------------------------------------------------------Rotate cell along the line joining 2 nuclei-----------------------------------------------------------------
from ovito.data import *
from ovito.modifiers import AffineTransformationModifier
import numpy as np

def quaternion_from_dir(v1, v2):
    k_cos_theta = np.dot(v1,v2) 
    k = np.linalg.norm(v1) * np.linalg.norm(v2)
    qxyz = np.cross(v1, v2)
    qw = k_cos_theta + k 
    q = np.append(qxyz, qw)
    if(k_cos_theta / k == -1):
        q = (0,1,0,0)
    return  q /np.linalg.norm(q)
 
def quaternion_rotation_matrix(q):   
    q3, q0, q1, q2 = q  
    # First row of the rotation matrix
    r00 = 2 * (q0 * q0 + q1 * q1) - 1
    r01 = 2 * (q1 * q2 - q0 * q3)
    r02 = 2 * (q1 * q3 + q0 * q2)
    # Second row of the rotation matrix
    r10 = 2 * (q1 * q2 + q0 * q3)
    r11 = 2 * (q0 * q0 + q2 * q2) - 1
    r12 = 2 * (q2 * q3 - q0 * q1)    
    # Third row of the rotation matrix
    r20 = 2 * (q1 * q3 - q0 * q2)
    r21 = 2 * (q2 * q3 + q0 * q1)
    r22 = 2 * (q0 * q0 + q3 * q3) - 1   
    # 3x3 rotation matrix 
    rot_matrix = np.array([[r00, r01, r02],
                           [r10, r11, r12],
                           [r20, r21, r22]])             
    return np.linalg.inv(rot_matrix)  
            

def modify(frame: int, data: DataCollection):
    
    if "Selection" not in data.particles:
       raise RuntimeError("Please use a Selection Modifier to select 2 particles first.")
    
    #Align distance vector connecting two selected particles with x-axis
    a,b = np.where(data.particles.selection == 1)[0]
    line = data.particles.position[b] - data.particles.position[a]
    quat = quaternion_from_dir(line, (1,0,0))  
    mod = AffineTransformationModifier(
            operate_on = {'particles',}, # Transform particles but not the cell
            transformation = np.column_stack((quaternion_rotation_matrix(quat), (0,0,0))))
    data.apply(mod)

    #Shrink wrap simulation box
    # Compute min/max range of particle coordinates.
    coords_min = np.amin(data.particles.positions, axis=0)
    coords_max = np.amax(data.particles.positions, axis=0)

    # Build the new 3x4 cell matrix:
    cell = data.cell[:3,:3]
    matrix = np.empty((3,4))
    matrix[:,:3] = np.diag(coords_max - coords_min)
    matrix[:, 3] = coords_min

    # Assign the cell matrix 
    data.create_cell(matrix, (False, False, False))
----------------------------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------Recentering the cell-----------------------------------------------------------------
from ovito.data import *
from ovito.modifiers import *
import numpy as np

def modify(frame, data):
    cell_matrix = np.array(data.cell)
    cell_matrix[:,3] = np.dot((-0.5, -0.5, -0.5), data.cell[:,:3])
    data.apply(AffineTransformationModifier(relative_mode=False, target_cell=cell_matrix))
----------------------------------------------------------------------------------------------------------------------------------------------
